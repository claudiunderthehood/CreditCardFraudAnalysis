input {
  http {
    port => 5044
    codec => multiline {
      pattern => "^{" # Assume JSON if line starts with '{'
      negate => true
      what => "previous"
    }
  }
}

filter {
  if [message] =~ /^{.*}$/ {
    json {
      source => "message"
      remove_field => ["message"]
    }
  } else {
    csv {
      separator => ","
      columns => ["V0", "V1", "V2", "V3", "V4", "V5", "V6", "V7"]
      remove_field => ["log", "file", "@version", "host", "message", "tags", "event"]
    }

    mutate {
      rename => {
        "V0" => "TRANSACTION_ID"
        "V1" => "TX_DATETIME"
        "V2" => "CUSTOMER_ID"
        "V3" => "TERMINAL_ID"
        "V4" => "TX_AMOUNT"
        "V5" => "TX_TIME_SECONDS"
        "V6" => "TX_FRAUD"
        "V7" => TX_DURING_NIGHT
      }
    }

    mutate {
      convert => {
        "TRANSACTION_ID" => "integer"
        "TX_DATETIME" => "integer"
        "CUSTOMER_ID" => "integer"
        "TERMINAL_ID" => "integer"
        "TX_AMOUNT" => "float"
        "TX_TIME_SECONDS" => "integer"
        "TX_FRAUD" => "float"
        "TX_DURING_NIGHT" => "integer"
      }
    }
  }
}

output {
  csv {
    fields => ["TRANSACTION_ID", "TX_DATETIME", "CUSTOMER_ID", "TERMINAL_ID", "TX_AMOUNT", "TX_TIME_SECONDS", "TX_FRAUD", "TX_DURING_NIGHT"]
    path => "/usr/share/logstash/transactions.csv"
  }
}

input {
  file {
    path => "/usr/share/logstash/transactions.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    mode => "read"
    file_completed_action => "log"
    file_completed_log_path => "/usr/share/logstash/completed.log"
  }
}

filter {
  csv {
    separator => ","
    columns => ["TRANSACTION_ID", "TX_DATETIME", "CUSTOMER_ID", "TERMINAL_ID", "TX_AMOUNT", "TX_TIME_SECONDS", "TX_FRAUD", "TX_DURING_NIGHT"]
    remove_field => ["log", "file", "@version", "host", "message", "tags", "event"]
  }
  mutate {
    convert => {
      "TRANSACTION_ID" => "integer"
      "TX_DATETIME" => "integer"
      "CUSTOMER_ID" => "integer"
      "TERMINAL_ID" => "integer"
      "TX_AMOUNT" => "float"
      "TX_TIME_SECONDS" => "integer"
      "TX_FRAUD" => "float"
      "TX_DURING_NIGHT" => "integer"
    }
  }
}

output {
  kafka {
    codec => json
    topic_id => "transactions"
    bootstrap_servers => "10.0.100.23:9092"
  }
  stdout {}
}
